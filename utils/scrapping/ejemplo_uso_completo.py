"""
Ejemplo completo de uso del sistema de an√°lisis de emociones en tweets
Este script muestra todo el flujo de trabajo desde la recolecci√≥n hasta la visualizaci√≥n
"""

from tweets_sentiments_test import TweetsEmotionAnalyzer, mostrar_resumen_rapido
from visualizador_emociones import crear_visualizaciones
import pandas as pd
from pathlib import Path


def ejemplo_1_generar_script_recoleccion():
    """
    PASO 1: Generar el script de PowerShell para recolectar tweets
    
    Este paso genera un archivo .ps1 que puedes ejecutar en PowerShell
    para descargar todos los tweets del per√≠odo especificado.
    """
    print("\n" + "=" * 70)
    print("EJEMPLO 1: GENERAR SCRIPT DE RECOLECCI√ìN")
    print("=" * 70)
    
    # Crear instancia del analizador
    analyzer = TweetsEmotionAnalyzer()
    
    # Generar script de recolecci√≥n
    script_path = analyzer.generar_script_recoleccion(
        output_file="recolectar_tweets_culiacan.ps1"
    )
    
    print(f"\n‚úÖ Script generado: {script_path}")
    print("\nüìù SIGUIENTE PASO:")
    print("   1. Abre PowerShell")
    print("   2. Navega al directorio del proyecto")
    print("   3. Ejecuta: .\\recolectar_tweets_culiacan.ps1")
    print("\n‚ö†Ô∏è  NOTA: La recolecci√≥n de un a√±o completo puede tomar varias horas.")
    print("   Puedes pausar y reanudar el script sin problemas.\n")


def ejemplo_2_analisis_rapido():
    """
    PASO 2: An√°lisis de una muestra peque√±a (para pruebas)
    
    Este ejemplo muestra c√≥mo analizar tweets de unos pocos d√≠as
    sin tener que esperar la recolecci√≥n completa.
    """
    print("\n" + "=" * 70)
    print("EJEMPLO 2: AN√ÅLISIS R√ÅPIDO (MUESTRA)")
    print("=" * 70)
    
    # Configuraci√≥n para solo una semana (prueba)
    config_prueba = {
        'fecha_inicio': '2025-01-01',
        'fecha_fin': '2025-01-07'
    }
    
    analyzer = TweetsEmotionAnalyzer(config_override=config_prueba)
    
    # Generar comandos para una semana
    print("\nüìã Comandos para recolectar una semana de prueba:")
    print("-" * 70)
    for i in range(7):
        from datetime import datetime, timedelta
        fecha = datetime(2025, 1, 1) + timedelta(days=i)
        fecha_str = fecha.strftime("%Y-%m-%d")
        comando = analyzer.generar_comando_snscrape(fecha_str)
        print(f"\n# D√≠a {i+1}:")
        print(comando)
    
    print("\nüí° TIP: Ejecuta estos comandos manualmente en PowerShell para probar")


def ejemplo_3_procesar_tweets_recolectados():
    """
    PASO 3: Procesar tweets ya recolectados
    
    Una vez que hayas recolectado tweets, este paso los procesa,
    clasifica emociones y genera el an√°lisis completo.
    """
    print("\n" + "=" * 70)
    print("EJEMPLO 3: PROCESAR TWEETS RECOLECTADOS")
    print("=" * 70)
    
    # Verificar si hay datos
    data_dir = Path("data_tweets_culiacan/raw")
    archivos = list(data_dir.glob("tweets_*.jsonl")) if data_dir.exists() else []
    
    if not archivos:
        print("\n‚ö†Ô∏è  No se encontraron tweets recolectados.")
        print("   Primero ejecuta el script de recolecci√≥n (Ejemplo 1).")
        return
    
    print(f"\n‚úÖ Encontrados {len(archivos)} archivos de tweets")
    print("\nüîÑ Iniciando procesamiento completo...")
    print("   (Esto puede tomar varios minutos dependiendo del volumen)\n")
    
    # Crear analizador y ejecutar pipeline completo
    analyzer = TweetsEmotionAnalyzer()
    
    try:
        resultados = analyzer.pipeline_completo(desde_raw=True)
        
        if resultados:
            print("\n" + "=" * 70)
            print("‚úÖ PROCESAMIENTO COMPLETADO")
            print("=" * 70)
            
            # Mostrar resumen
            mostrar_resumen_rapido(resultados['analisis'])
            
            # Informaci√≥n de archivos generados
            print("\nüìÅ Archivos generados:")
            print(f"   - Tweets clasificados: data_tweets_culiacan/resultados/")
            print(f"   - Resumen diario: data_tweets_culiacan/resultados/")
            print(f"   - An√°lisis anual: data_tweets_culiacan/resultados/")
            
            return resultados
        
    except Exception as e:
        print(f"\n‚ùå Error en el procesamiento: {e}")
        print("   Verifica que tengas instaladas las dependencias:")
        print("   pip install pysentimiento pandas numpy tqdm")


def ejemplo_4_generar_visualizaciones():
    """
    PASO 4: Generar visualizaciones
    
    Crea todos los gr√°ficos y visualizaciones del an√°lisis.
    """
    print("\n" + "=" * 70)
    print("EJEMPLO 4: GENERAR VISUALIZACIONES")
    print("=" * 70)
    
    # Buscar archivo de resumen diario
    resultados_dir = Path("data_tweets_culiacan/resultados")
    archivos_resumen = list(resultados_dir.glob("resumen_diario_*.csv")) if resultados_dir.exists() else []
    
    if not archivos_resumen:
        print("\n‚ö†Ô∏è  No se encontr√≥ archivo de resumen diario.")
        print("   Primero procesa los tweets (Ejemplo 3).")
        return
    
    # Usar el archivo m√°s reciente
    archivo_mas_reciente = max(archivos_resumen, key=lambda p: p.stat().st_mtime)
    
    print(f"\nüìä Cargando datos desde: {archivo_mas_reciente.name}")
    
    # Cargar datos
    df_diario = pd.read_csv(archivo_mas_reciente)
    
    print(f"   - D√≠as con datos: {len(df_diario)}")
    print(f"   - Total de tweets: {df_diario['n_total'].sum():,}")
    
    # Generar visualizaciones
    print("\nüé® Generando visualizaciones...")
    crear_visualizaciones(df_diario)
    
    print("\nüìÅ Visualizaciones guardadas en: data_tweets_culiacan/visualizaciones/")


def ejemplo_5_analisis_personalizado():
    """
    PASO 5: An√°lisis personalizado
    
    Ejemplo de c√≥mo hacer an√°lisis adicionales con los datos procesados.
    """
    print("\n" + "=" * 70)
    print("EJEMPLO 5: AN√ÅLISIS PERSONALIZADO")
    print("=" * 70)
    
    # Cargar datos procesados
    resultados_dir = Path("data_tweets_culiacan/resultados")
    archivo_diario = list(resultados_dir.glob("resumen_diario_*.csv"))
    
    if not archivo_diario:
        print("\n‚ö†Ô∏è  No hay datos para analizar.")
        return
    
    df = pd.read_csv(archivo_diario[0])
    df['fecha'] = pd.to_datetime(df['fecha'])
    
    print("\nüìä AN√ÅLISIS PERSONALIZADOS:")
    print("-" * 70)
    
    # 1. D√≠a de la semana m√°s emotivo
    df['dia_semana'] = df['fecha'].dt.day_name()
    dias_semana_es = {
        'Monday': 'Lunes', 'Tuesday': 'Martes', 'Wednesday': 'Mi√©rcoles',
        'Thursday': 'Jueves', 'Friday': 'Viernes', 'Saturday': 'S√°bado', 'Sunday': 'Domingo'
    }
    df['dia_semana_es'] = df['dia_semana'].map(dias_semana_es)
    
    print("\n1Ô∏è‚É£  EMOCIONES POR D√çA DE LA SEMANA:")
    for dia in ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']:
        df_dia = df[df['dia_semana_es'] == dia]
        if not df_dia.empty:
            emocion_comun = df_dia['ganador_del_dia'].mode()[0]
            print(f"   {dia:10} ‚Üí {emocion_comun.capitalize()}")
    
    # 2. Mes m√°s emotivo
    df['mes'] = df['fecha'].dt.month
    print("\n2Ô∏è‚É£  EMOCI√ìN DOMINANTE POR MES:")
    for mes in range(1, 13):
        df_mes = df[df['mes'] == mes]
        if not df_mes.empty:
            emocion_comun = df_mes['ganador_del_dia'].mode()[0]
            meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 
                    'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']
            print(f"   {meses[mes-1]:3} ‚Üí {emocion_comun.capitalize()}")
    
    # 3. Racha m√°s larga de una emoci√≥n
    print("\n3Ô∏è‚É£  RACHA M√ÅS LARGA POR EMOCI√ìN:")
    df_sorted = df.sort_values('fecha')
    
    for emocion in ['alegria', 'tristeza', 'ira', 'miedo', 'sorpresa']:
        racha_actual = 0
        racha_max = 0
        fecha_inicio_max = None
        fecha_fin_max = None
        fecha_inicio = None
        
        for idx, row in df_sorted.iterrows():
            if row['ganador_del_dia'] == emocion:
                if racha_actual == 0:
                    fecha_inicio = row['fecha']
                racha_actual += 1
                if racha_actual > racha_max:
                    racha_max = racha_actual
                    fecha_inicio_max = fecha_inicio
                    fecha_fin_max = row['fecha']
            else:
                racha_actual = 0
        
        if racha_max > 0:
            print(f"   {emocion.capitalize():10} ‚Üí {racha_max} d√≠as consecutivos")
    
    # 4. Correlaci√≥n entre volumen y emociones
    print("\n4Ô∏è‚É£  D√çAS CON M√ÅS TWEETS:")
    top_volumen = df.nlargest(5, 'n_total')[['fecha', 'n_total', 'ganador_del_dia']]
    for _, row in top_volumen.iterrows():
        fecha_str = row['fecha'].strftime('%Y-%m-%d')
        print(f"   {fecha_str} ‚Üí {row['n_total']:4} tweets ({row['ganador_del_dia'].capitalize()})")


def menu_interactivo():
    """Men√∫ interactivo para ejecutar los diferentes ejemplos"""
    while True:
        print("\n" + "=" * 70)
        print("SISTEMA DE AN√ÅLISIS DE EMOCIONES EN TWEETS - CULIAC√ÅN")
        print("=" * 70)
        print("\nSelecciona una opci√≥n:")
        print("\n  1Ô∏è‚É£  Generar script de recolecci√≥n de tweets")
        print("  2Ô∏è‚É£  Mostrar comandos para muestra de prueba")
        print("  3Ô∏è‚É£  Procesar tweets recolectados")
        print("  4Ô∏è‚É£  Generar visualizaciones")
        print("  5Ô∏è‚É£  An√°lisis personalizados")
        print("  6Ô∏è‚É£  Ejecutar pipeline completo (3 + 4)")
        print("  0Ô∏è‚É£  Salir")
        print("\n" + "-" * 70)
        
        try:
            opcion = input("\nOpci√≥n: ").strip()
            
            if opcion == "1":
                ejemplo_1_generar_script_recoleccion()
            elif opcion == "2":
                ejemplo_2_analisis_rapido()
            elif opcion == "3":
                ejemplo_3_procesar_tweets_recolectados()
            elif opcion == "4":
                ejemplo_4_generar_visualizaciones()
            elif opcion == "5":
                ejemplo_5_analisis_personalizado()
            elif opcion == "6":
                print("\nüöÄ Ejecutando pipeline completo...\n")
                resultados = ejemplo_3_procesar_tweets_recolectados()
                if resultados:
                    ejemplo_4_generar_visualizaciones()
            elif opcion == "0":
                print("\nüëã ¬°Hasta luego!\n")
                break
            else:
                print("\n‚ùå Opci√≥n no v√°lida. Intenta de nuevo.")
            
            input("\nPresiona ENTER para continuar...")
            
        except KeyboardInterrupt:
            print("\n\nüëã ¬°Hasta luego!\n")
            break
        except Exception as e:
            print(f"\n‚ùå Error: {e}")
            input("\nPresiona ENTER para continuar...")


if __name__ == "__main__":
    # Mostrar informaci√≥n inicial
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                                  ‚ïë
    ‚ïë     SISTEMA DE AN√ÅLISIS DE EMOCIONES EN TWEETS                   ‚ïë
    ‚ïë     Proyecto: Predicci√≥n de Homicidios en Culiac√°n              ‚ïë
    ‚ïë                                                                  ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    Este sistema te permite:
    
    ‚úÖ Recolectar tweets hist√≥ricos sobre Culiac√°n
    ‚úÖ Clasificar emociones autom√°ticamente (5 categor√≠as)
    ‚úÖ Analizar tendencias temporales
    ‚úÖ Generar visualizaciones profesionales
    ‚úÖ Exportar datos para integraci√≥n con modelos predictivos
    
    üìã REQUISITOS:
       - snscrape (pip install snscrape)
       - pysentimiento (pip install pysentimiento)
       - pandas, numpy, matplotlib, seaborn
    
    """)
    
    # Ejecutar men√∫ interactivo
    menu_interactivo()
